#include <iostream>
#include <map>
#include <vector>
#include <iomanip>

class Keypad{
public:
	enum Dir {UP,RIGHT,DOWN,LEFT};
private:
	std::map<std::pair<char,Dir>,char> keypad; 
public:
	Keypad(){
		char d = '_';
		std::vector<std::vector<char>> nums = 
		{
			{ d , d , d , d , d , d , d },
			{ d , d , d ,'1', d , d , d },
			{ d , d ,'2','3','4', d , d },
			{ d ,'5','6','7','8','9', d },
			{ d , d ,'A','B','C', d , d },
			{ d , d , d ,'D', d , d , d },
			{ d , d , d , d , d , d , d }
		};

		// for(auto a: nums[3]){
		// 	std::cout<<' '<<a<<' ';
		// }
		for(int i=1; i<6;++i){
			for(int j=1; j<6;++j){
				char currentNum = nums[i][j];

				//up
				char up = nums[i-1][j] == d ? currentNum : nums[i-1][j];
				keypad.insert(std::pair<std::pair<char,Dir>, char>{std::pair<char,Dir>{currentNum, Dir::UP}, up});

				//down
				char down = nums[i+1][j] == d ? currentNum : nums[i+1][j];
				keypad.insert(std::pair<std::pair<char,Dir>, char>{std::pair<char,Dir>{currentNum, Dir::DOWN}, down});

				//left
				char left = nums[i][j-1] == d ? currentNum : nums[i][j-1];
				keypad.insert(std::pair<std::pair<char,Dir>, char>{std::pair<char,Dir>{currentNum, Dir::LEFT}, left});

				//right
				char right = nums[i][j+1] == d ? currentNum : nums[i][j+1];
				keypad.insert(std::pair<std::pair<char,Dir>, char>{std::pair<char,Dir>{currentNum, Dir::RIGHT}, right});
			}
		}
	}



	char getNumInDir(char from, Dir dir){
		return keypad[std::pair<char,Dir>{from,dir}];
	}
};

class KeypadNavigator{
	static const char start = '5';
	char current;
	Keypad k;
public:
	KeypadNavigator(){current=start;}
	char getPos(){return current;}
	void move(char dir){
		switch(dir){
			case 'U':
				current = k.getNumInDir(current,Keypad::Dir::UP);
				break;
			case 'D':
				current = k.getNumInDir(current,Keypad::Dir::DOWN);
				break;
			case 'L':
				current = k.getNumInDir(current,Keypad::Dir::LEFT);
				break;
			case 'R':
				current = k.getNumInDir(current,Keypad::Dir::RIGHT);
				break;
		}
	}

};

int main(){
	KeypadNavigator kn;
	std::string s = R"(DULUDRDDDRLUDURUUULRRRURDRDULRUDDUDRULUDDUDRLDULRRLRDRUDUUULUUDLRURDUDDDDRDLLLLULRDLDRDLRLULRUURDDUULUDLRURRDDRDDRDDLDRDLLUURDRUULRRURURRDLRLLLUDULULULULUDRLLRUDUURLDRLRLRDRRDRLLLDURRDULDURDDRLURRDURLRRRLDLLLDRUUURLRDLDLLLLRDURRLDLULRLDDLDLURLRRDDRUDDUULRURRUDLRDLDUURDDDDRLRURUDULUDLRRLLLLLRDRURLLDLDULUUDLUDDDRLLDRRUDLLURRUUDDRRLLRRLDDDURLDRDRLURRRRDRRRDDUDULULDURRUUURRRDULUUUDDRULDRLLRDLDURLURRLLRUUUULRDURLLDDRLLDLRLRULUUDRURUDLLURUDDRDURLRDRRRDURLDDRDRLRLLURULUUULUDDDULDLRDDDRDLLRRLDRDULLUUUDLDDLDDDLLLLLLLDUDURURDURDRUURRRDDRDUDLULDURDUDURDDDRULDURURURRLURLURLUURLULDLLRUULURDDRLRDDLRDLRRR
LUURLRUDRRUDLLDLUDDURULURLUUDUUDDRLUULRDUDDUULDUUDRURDDRRDRLULLRDRDLRLLUURRUULRLDRULUDLDUUDDDRDDLRDLULDRLDUULDLRDLLLDLDLRDUULUDURRULLRLDUDRLLLULUUUULUUDUUURRRDULLUURUDRRLDURRUULDRDULDUDRDUUULUUDDRLUDRLDLDRUUURDLDUDRUDUURLLRRLRLLRRLDULDDULUDUUURULDDUDUDRURRDLULRUDDURDLDLLRRRLDRLULLLRUULDUDLUUDURRLLLRLUDURRDDLDRDDDLURDLDRRUDUDLUDULULRUUUDLUURLLRLDDLURULDURDLRRDDDDURLDDLLDDULLLRLDLDULDUUDDRLDUURDDLDLUUDULRRLRLUURURUURLRLURUURLDRUURLLRDDUUUDULUDDDRDRLDRDRRLRLDULLRRUDLURULULRDRURURLULDUDLRURLRDDRULDDLRD
LUDRULUULRRDDDDRRDUURUDDRLDDLDRDURRURULRDLDLDUUDRRDUUDUDLLLRRLDUDDRLDDLRRLRDRLUDLULUDDUUDULDUUULUDLDDURLDURUDLDRUUDRLRRLDLDDULDUUDDLDDLLURDRLRUURDDRUDDUDLDRRLRUDRUULRRRLRULULURDLRRURDRLRULDDDRDUULLURUUUURUDDLRRRRRDURLULDLUULUDRRUDUDRRDDRURDURLRLUDDLDLRRULUDLDDRLDDLDDDLLLLRDLLUULDDLULDLDRDDUDLURUDLDLDDRRUUDDDLRLLLDRRDDDUURDUDURUURRDRLLDUDLDUULLDLDLLUULLRRULDLDRURLDULDRUURDURRURDLRDLLLDRRUDRUUDRURLUDDRURLDURRDLUUDLUUDULLLDDDDRRDLLLDLURULDDRDLUUURRDRRUUDDUL
DUUULDUDDDURLLULDDLLUDURLLLURULULURUURDRURLRULLLLDRDDULRRDRRLLLRDDDUULLRRURRULLDDURRRLRDDLULDULLDUDLURRDLDDLURDLRLLDRURLLRLLRRRDRRRURURUUDDLLDDLDDDLRLURUUUULRDLUDDDURLLDDRLDRRLLUDUUULRLLDRRRLRUUDLDUULRLUDRULLLLDUDLLUUDDRUURLURUDRDDDLRURUDRLULLULUUDLDURDULRRDRLDURUULRDRRRDRDRRLRLRDDUULLRDLDURDDDULURRLULDDURDURDDUDURDLLUUULUDULRDDLDRDRUDLLUURDLRDURURULURULLDRLLRRULDLULULDLULRURLRRLUDLLLRLUDLURLULDULDRLLLDLDDDDRDRLRRLRDULUUDULDDLDURDLLLDDDDLLUURRDURLDLUDDLULRUUUDDRRLDLLLRDLLDRRRDDLULLURDDRRRRLDLRLLLRL
LULLRRDURRLDUUDRRURLURURRRLRDRUULUULURLLURRDRULRDURDDDDUULLLLDUULDLULURDRLDLULULDRLLDLLRLRULURUDRUUDULRULLLUDRULUDRLLUDLDRRDRUUURURLRDURDRLRDDDURLURRDLRUUUDUURULULDLUULRDLRRRDRDRLLLDLRRDRLLDDULDRUDRRLULLRDLDUDDULRDDLULRURULRLLLULDLLLLRDLDRURUDUURURLDRLUULLDUDULUDDDULUDLRUDDUDLULLUULUUURULURRULRDDURDDLURLRRDRDLDULRLRDRRRULRDDDRLLDDDDRRRRDRDLULUURDURULDLRDULDUDLDURUDLUDLUDDDUDURDURDDURLLRUDUURRRUDRRRRULLLLDDDLUULLUULRRRULDLURDLULRULDRLR)";
	std::stringstream ss{s};
    for (std::string line; std::getline(ss, line); ) {
        for(char c : line){
        	kn.move(c);
        }
        std::cout<<kn.getPos();
    }

	

}